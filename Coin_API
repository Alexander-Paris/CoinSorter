import cv2
import time
import numpy as np
import google.generativeai as genai

# Configure Gemini API Key
genai.configure(api_key="YOUR-GEMINI-API-KEY-HERE")  # <-- Replace with your Gemini API key

# Use Gemini Flash 1.5
model = genai.GenerativeModel(model_name="gemini-1.5-flash")

# Preprocess image (sharpening + contrast enhancement)
def preprocess_color_enhance(image):
    # Blur to reduce noise
    blurred = cv2.GaussianBlur(image, (3, 3), 0)

    # Sharpening kernel
    kernel = np.array([
        [0, -1, 0],
        [-1, 5, -1],
        [0, -1, 0]
    ])
    sharpened = cv2.filter2D(blurred, -1, kernel)

    # Enhance contrast (CLAHE on L-channel)
    lab = cv2.cvtColor(sharpened, cv2.COLOR_BGR2LAB)
    l, a, b = cv2.split(lab)

    clahe = cv2.createCLAHE(clipLimit=2.0, tileGridSize=(8, 8))
    cl = clahe.apply(l)

    merged = cv2.merge((cl, a, b))
    final = cv2.cvtColor(merged, cv2.COLOR_LAB2BGR)

    return final

# Capture and preprocess image
def capture_and_save_image(filename="coin.jpg"):
    cap = cv2.VideoCapture(0)

    if not cap.isOpened():
        raise Exception("Could not open webcam")

    # Set high resolution
    cap.set(cv2.CAP_PROP_FRAME_WIDTH, 1920)
    cap.set(cv2.CAP_PROP_FRAME_HEIGHT, 1080)

    time.sleep(2)  # Let camera warm up

    ret, frame = cap.read()
    cap.release()

    if not ret:
        raise Exception("Failed to capture image")

    # Enhance and save
    enhanced = preprocess_color_enhance(frame)
    cv2.imwrite(filename, enhanced)
    print(f"Image saved to {filename}")
    return filename

# Load image as bytes
def load_image_bytes(path):
    with open(path, "rb") as f:
        return f.read()

# Analyze coin using Gemini
def analyze_coin_with_gemini():
    image_path = capture_and_save_image()

    image_data = load_image_bytes(image_path)

    prompt = (
        "You are an expert coin appraiser and professional numismatist. "
        "Identify the following from this coin image:\n"
        "- Likely mint year\n"
        "- Country of origin\n"
        "- Denomination (e.g., cent, quarter, etc.)\n"
        "- Mint mark (if visible)\n"
        "- Estimated grade (Poor, Fine, XF, MS-65, etc.)\n"
        "Be detailed and explain anything unclear."
    )

    response = model.generate_content(
        [
            prompt,
            {"mime_type": "image/jpeg", "data": image_data}
        ]
    )

    print("\n--- Gemini Coin Analysis Result ---")
    print(response.text)

if __name__ == "__main__":
    analyze_coin_with_gemini()
