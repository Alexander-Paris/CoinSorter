import cv2
import base64
import time
from openai import OpenAI
import numpy as np

# Initialize OpenAI client
client = OpenAI(api_key="YOUR-OPENAI-API-KEY-HERE")  # <-- put your API key here

# Capture image from webcam at high resolution
def capture_image(filename="coin.jpg"):
    cap = cv2.VideoCapture(0)  # Use 0 or 1 depending on your webcam

    if not cap.isOpened():
        raise Exception("Could not open webcam")

    # Set high resolution (Full HD 1920x1080)
    cap.set(cv2.CAP_PROP_FRAME_WIDTH, 1920)
    cap.set(cv2.CAP_PROP_FRAME_HEIGHT, 1080)

    time.sleep(2)  # Let the camera warm up

    ret, frame = cap.read()
    if not ret:
        raise Exception("Failed to capture image from webcam")

    # Apply color enhancement: sharpening and contrast boost
    enhanced_frame = preprocess_color_enhance(frame)

    # Save the processed image
    cv2.imwrite(filename, enhanced_frame)
    cap.release()

# Preprocess image for color enhancement: sharpening + contrast boost
def preprocess_color_enhance(image):
    # Step 1: Apply slight Gaussian Blur to remove noise
    blurred = cv2.GaussianBlur(image, (3, 3), 0)

    # Step 2: Sharpen the image (without losing color)
    kernel = np.array([
        [0, -1, 0],
        [-1, 5, -1],
        [0, -1, 0]
    ])
    sharpened = cv2.filter2D(blurred, -1, kernel)

    # Step 3: Increase contrast (for BGR)
    lab = cv2.cvtColor(sharpened, cv2.COLOR_BGR2LAB)
    l, a, b = cv2.split(lab)

    clahe = cv2.createCLAHE(clipLimit=2.0, tileGridSize=(8,8))
    cl = clahe.apply(l)

    merged = cv2.merge((cl, a, b))
    final = cv2.cvtColor(merged, cv2.COLOR_LAB2BGR)

    return final

# Encode image to base64
def encode_image(image_path):
    with open(image_path, "rb") as image_file:
        return base64.b64encode(image_file.read()).decode("utf-8")

# Analyze the captured coin image
def analyze_coin():
    image_path = "coin.jpg"
    capture_image(image_path)
    print(f"Image captured and saved to {image_path}")

    base64_image = encode_image(image_path)

    # Request OpenAI with expert coin appraiser prompt
    response = client.chat.completions.create(
        model="gpt-4o",  # or "gpt-4-vision-preview" if you want
        messages=[
            {
                "role": "user",
                "content": [
                    {
                        "type": "text",
                        "text": (
                            "You are an expert coin appraiser and professional numismatist. "
                            "You specialize in identifying coins by mint year, denomination "
                            "Analyze the following image of a coin and tell me:\n"
                            "- Likely year\n"
                            "- Mint mark (if visible)\n"
                            "- Denomination (e.g., cent, quarter, etc.)\n"
                            "Be very detailed and specific. Only guess if absolutely necessary. "
                            "Explain anything unclear about the coin or image."
                        )
                    },
                    {
                        "type": "image_url",
                        "image_url": {
                            "url": f"data:image/jpeg;base64,{base64_image}"
                        }
                    },
                ]
            }
        ],
        max_tokens=500,
    )

    result = response.choices[0].message.content
    print("\n--- Coin Analysis Result ---")
    print(result)

if __name__ == "__main__":
    analyze_coin()
