import cv2
import numpy as np
from gpiozero import OutputDevice, Button
from RPLCD.i2c import CharLCD
from time import sleep
import time
import cvzone
import base64
import re
from openai import OpenAI

# --------- Setup ---------
# Camera
cap = cv2.VideoCapture(0)
cap.set(3, 640)
cap.set(4, 480)
cv2.namedWindow("Camera", cv2.WINDOW_NORMAL)
cv2.resizeWindow("Camera", 1280, 720)

# LCD via I2C
lcd = CharLCD('PCF8574', 0x27)

# Buttons
mode_button = Button(26, pull_up=True)
confirm_button = Button(19, pull_up=True)

# Modes
modes = ["Value", "Mint", "Year"]
current_mode = 0
selected_mode_active = False
totalMoney = 0
classified = False

# Stepper motor via GPIOZero (can be expanded to 4-wire)
STEP_PIN = OutputDevice(18)
DIR_PIN = OutputDevice(23)

# Optional: 4-step sequence motor
IN1 = OutputDevice(17)
IN2 = OutputDevice(27)
IN3 = OutputDevice(24)
IN4 = OutputDevice(25)

step_sequence = [
    [1, 0, 0, 0],
    [1, 1, 0, 0],
    [0, 1, 0, 0],
    [0, 1, 1, 0],
    [0, 0, 1, 0],
    [0, 0, 1, 1],
    [0, 0, 0, 1],
    [1, 0, 0, 1]
]

# Step values for coin sorting
coin_position_steps = {
    "Penny": 0,
    "Nickel": 40,
    "Dime": 80,
    "Quarter": 120,
    "Token": 160
}

# --------- Functions ---------
def empty(a): pass

def preProcessing(img):
    imgPre = cv2.GaussianBlur(img, (5, 5), 3)
    imgPre = cv2.Canny(imgPre, 59, 416)
    kernel = np.ones((5, 5), np.uint8)
    imgPre = cv2.dilate(imgPre, kernel, iterations=1)
    imgPre = cv2.morphologyEx(imgPre, cv2.MORPH_CLOSE, kernel)
    return imgPre

def lcd_update():
    lcd.clear()
    if selected_mode_active:
        lcd.write_string(modes[current_mode].ljust(16))
        lcd.crlf()
        lcd.write_string("Insert Coin".ljust(16))
    else:
        lcd.write_string("Sorting Mode:".ljust(16))
        lcd.crlf()
        lcd.write_string(modes[current_mode].ljust(16))

def step_motor(steps, direction=1, delay=0.005):
    if direction:
        DIR_PIN.on()
    else:
        DIR_PIN.off()
    for _ in range(abs(steps)):
        STEP_PIN.on()
        time.sleep(delay)
        STEP_PIN.off()
        time.sleep(delay)

def platform_motor(steps, delay=0.001, reverse=False):
    if reverse:
        sequence = step_sequence[::-1]
    else:
        sequence = step_sequence
    for _ in range(steps):
        for step in sequence:
            IN1.value, IN2.value, IN3.value, IN4.value = step
            time.sleep(delay)

# --------- Helper Functions ---------
def encode_image_to_base64(image):
    _, img_encoded = cv2.imencode('.jpg', image)
    return base64.b64encode(img_encoded).decode('utf-8')

def identify_coin_via_openai(base64_image):
    # Replace with actual OpenAI API call
    openai = OpenAI()
    response = openai.responses.create(
        model="gpt-4.1",
        input=[
            {
                "role": "user",
                "content": [
                    {"type": "input_text", "text": "what's in this image?"},
                    {"type": "input_image", "image_url": f"data:image/jpeg;base64,{base64_image}"}
                ]
            }
        ]
    )
    return response.output_text

def parse_coin_info(openai_response):
    denomination = None
    mint = None
    year = None
    denominations = ["Penny", "Nickel", "Dime", "Quarter", "Token"]
    for d in denominations:
        if d.lower() in openai_response.lower():
            denomination = d
            break
    mint_match = re.search(r"\b(P|D|S|W)\b", openai_response)
    if mint_match:
        mint = mint_match.group(1)
    year_match = re.search(r"\b(18|19|20)\d{2}\b", openai_response)
    if year_match:
        year = int(year_match.group(0))
    return denomination, mint, year

# --------- Sorting Functions ---------
def sort_by_value():
    global totalMoney, classified
    no_coin_counter = 0
    while selected_mode_active:
        success, img = cap.read()
        if not success:
            continue
        imgPre = preProcessing(img)
        imgContours, conFound = cvzone.findContours(img, imgPre, minArea=500)
        validContours = []
        if conFound:
            for contour in conFound:
                peri = cv2.arcLength(contour['cnt'], True)
                approx = cv2.approxPolyDP(contour['cnt'], 0.02 * peri, True)
                if len(approx) == 8 and contour['area'] > 20000:
                    validContours.append((contour, approx))
        if validContours and not classified:
            print("Coin detected, processing...")
            time.sleep(1)
            ret, img = cap.read()
            if not ret:
                continue
            base64_img = encode_image_to_base64(img)
            openai_response = identify_coin_via_openai(base64_img)
            denomination, mint, year = parse_coin_info(openai_response)
            if denomination is None:
                denomination = "Token"
            print(f"Detected: {denomination}, Mint: {mint}, Year: {year}")
            lcd.clear()
            lcd.write_string(f"{denomination}")
            lcd.crlf()
            if mint and year:
                lcd.write_string(f"{mint} {year}")
            else:
                lcd.write_string("Sorting...")
            if denomination in coin_position_steps:
                steps = coin_position_steps[denomination]
                step_motor(steps, direction=1)
                sleep(1)
                step_motor(steps, direction=-1)
            sleep(3)
            lcd_update()
            classified = True
        elif not validContours:
            no_coin_counter += 1
            if no_coin_counter >= 5:
                classified = False
                totalMoney = 0
                no_coin_counter = 0

def sort_by_mint():
    print("Sorting by Mint...")
    lcd.clear()
    lcd.write_string("Sorting by Mint")
    no_coin_counter = 0
    while selected_mode_active:
        success, img = cap.read()
        if not success:
            continue
        imgPre = preProcessing(img)
        imgContours, conFound = cvzone.findContours(img, imgPre, minArea=500)
        validContours = []
        if conFound:
            for contour in conFound:
                peri = cv2.arcLength(contour['cnt'], True)
                approx = cv2.approxPolyDP(contour['cnt'], 0.02 * peri, True)
                if len(approx) == 8 and contour['area'] > 20000:
                    validContours.append((contour, approx))
        if validContours and not classified:
            print("Coin detected, processing...")
            time.sleep(1)
            ret, img = cap.read()
            if not ret:
                continue
            base64_img = encode_image_to_base64(img)
            openai_response = identify_coin_via_openai(base64_img)
            denomination, mint, year = parse_coin_info(openai_response)
            print(f"Detected Mint: {mint}")
            if mint == "D":
                steps = 40
            elif mint == "S":
                steps = 80
            elif mint == "P":
                steps = 120
            elif mint == "W":
                steps = 160
            else:
                steps = 0
            step_motor(steps, direction=1)
            sleep(1)
            step_motor(steps, direction=-1)
            sleep(3)
            lcd_update()
            classified = True
        elif not validContours:
            no_coin_counter += 1
            if no_coin_counter >= 5:
                classified = False
                no_coin_counter = 0

def sort_by_year():
    print("Sorting by Year...")
    lcd.clear()
    lcd.write_string("Sorting by Year")
    no_coin_counter = 0
    while selected_mode_active:
        success, img = cap.read()
        if not success:
            continue
        imgPre = preProcessing(img)
        imgContours, conFound = cvzone.findContours(img, imgPre, minArea=500)
        validContours = []
        if conFound:
            for contour in conFound:
                peri = cv2.arcLength(contour['cnt'], True)
                approx = cv2.approxPolyDP(contour['cnt'], 0.02 * peri, True)
                if len(approx) == 8 and contour['area'] > 20000:
                    validContours.append((contour, approx))
        if validContours and not classified:
            print("Coin detected, processing...")
            time.sleep(1)
            ret, img = cap.read()
            if not ret:
                continue
            base64_img = encode_image_to_base64(img)
            openai_response = identify_coin_via_openai(base64_img)
            denomination, mint, year = parse_coin_info(openai_response)
            print(f"Detected Year: {year}")
            if year and year < 2000:
                steps = 80
            else:
                steps = 120
            step_motor(steps, direction=1)
            sleep(1)
            step_motor(steps, direction=-1)
            sleep(3)
            lcd_update()
            classified = True
        elif not validContours:
            no_coin_counter += 1
            if no_coin_counter >= 5:
                classified = False
                no_coin_counter = 0

# --------- Button Callbacks ---------
def mode_button_callback():
    global current_mode
    if not selected_mode_active:
        current_mode = (current_mode + 1) % len(modes)
        lcd_update()
        print(f"Mode changed to: {modes[current_mode]}")

def confirm_button_callback():
    global selected_mode_active
    selected_mode_active = True
    lcd_update()
    selected_mode = modes[current_mode]
    print(f"Confirmed mode: {selected_mode}")
    if selected_mode == "Value":
        sort_by_value()
    elif selected_mode == "Mint":
        sort_by_mint()
    elif selected_mode == "Year":
        sort_by_year()

# --------- Main Setup ---------
lcd_update()

# Main loop to check buttons
while True:
    if mode_button.is_pressed:
        mode_button_callback()
        sleep(0.3)
    if confirm_button.is_pressed:
        confirm_button_callback()
        sleep(0.3)
